class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        // to make graph
        vector<pair<int,int>>adj[n];
        for(auto it:roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>time(n,1e9), ways(n,0);
        time[0]=0;
        ways[0]=1;
        pq.push({0,0});
        int mod =int( 1e18+7);
        while(!pq.empty()){
            int timee = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int adjnode = it.first;
                int edgtime = it.second;
                // arrivinf first time to the node
                if( timee + edgtime < time[adjnode]){
                    time[adjnode] = timee + edgtime;
                    ways[adjnode] = ways[node];
                    pq.push({timee + edgtime, adjnode});
                }
                // arriving again
                else if(timee + edgtime == time[adjnode]){
                    ways[adjnode] = (ways[node] + ways[adjnode])%mod;
                }
            }
        }
        return ways[n-1]% mod;
    }
};
